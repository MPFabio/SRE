apiVersion: apps/v1
kind: Deployment
metadata:
  name: url-shortener
  labels:
    app: url-shortener
spec:
  replicas: 3
  selector:
    matchLabels:
      app: url-shortener
  template:
    metadata:
      labels:
        app: url-shortener
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: url-shortener
        image: python:3.11-slim
        ports:
        - containerPort: 8080
        env:
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://otel-collector:4317"
        - name: OTEL_SERVICE_NAME
          value: "url-shortener"
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: "service.name=url-shortener,service.version=1.0.0"
        command: ["/bin/bash"]
        args:
        - -c
        - |
          mkdir -p /app
          pip install --no-cache-dir fastapi uvicorn opentelemetry-instrumentation-fastapi opentelemetry-exporter-otlp prometheus-client
          cat > /app/main.py << 'EOF'
          from fastapi import FastAPI, HTTPException
          from fastapi.responses import RedirectResponse
          import uvicorn
          import random
          import time
          import string
          import hashlib
          from typing import Dict
          from prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST
          from fastapi.responses import Response
          import logging
          
          # Configuration OpenTelemetry
          from opentelemetry import trace
          from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor
          from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
          from opentelemetry.sdk.trace import TracerProvider
          from opentelemetry.sdk.trace.export import BatchSpanProcessor
          from opentelemetry.sdk.resources import Resource
          
          # Configuration du tracing
          resource = Resource(attributes={
              "service.name": "url-shortener",
              "service.version": "1.0.0"
          })
          trace.set_tracer_provider(TracerProvider(resource=resource))
          tracer = trace.get_tracer(__name__)
          
          # Exporteur OTLP
          otlp_exporter = OTLPSpanExporter(endpoint="http://otel-collector:4317", insecure=True)
          span_processor = BatchSpanProcessor(otlp_exporter)
          trace.get_tracer_provider().add_span_processor(span_processor)
          
          app = FastAPI(title="URL Shortener SRE Lab", version="1.0.0")
          FastAPIInstrumentor.instrument_app(app)
          
          # Base de données en mémoire
          url_database: Dict[str, str] = {}
          
          # Métriques Prometheus
          REQUEST_COUNT = Counter('http_requests_total', 'Total HTTP requests', ['method', 'endpoint', 'status'])
          REQUEST_DURATION = Histogram('http_request_duration_seconds', 'HTTP request duration', ['method', 'endpoint'])
          URL_CREATED = Counter('urls_created_total', 'Total URLs created')
          URL_REDIRECTED = Counter('urls_redirected_total', 'Total URLs redirected')
          
          # Configuration du logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          def generate_short_code(url: str) -> str:
              """Génère un code court unique pour l'URL"""
              # Utilise les 8 premiers caractères du hash MD5
              hash_object = hashlib.md5(url.encode())
              return hash_object.hexdigest()[:8]
          
          @app.get("/")
          async def root():
              return {"message": "URL Shortener SRE Lab", "version": "1.0.0"}
          
          @app.post("/shorten")
          async def shorten_url(url: str):
              with tracer.start_as_current_span("shorten_url") as span:
                  span.set_attribute("url.length", len(url))
                  
                  if not url.startswith(('http://', 'https://')):
                      url = 'https://' + url
                  
                  short_code = generate_short_code(url)
                  url_database[short_code] = url
                  
                  URL_CREATED.inc()
                  logger.info(f"URL créée: {short_code} -> {url}")
                  
                  return {
                      "original_url": url,
                      "short_code": short_code,
                      "short_url": f"http://localhost:8080/{short_code}"
                  }
          
          @app.get("/health")
          async def health():
              return {"status": "healthy", "service": "url-shortener"}
          
          @app.get("/metrics")
          async def metrics():
              return Response(generate_latest(), media_type=CONTENT_TYPE_LATEST)
          
          @app.get("/{short_code}")
          async def redirect_url(short_code: str):
              with tracer.start_as_current_span("redirect_url") as span:
                  span.set_attribute("short_code", short_code)
                  
                  if short_code not in url_database:
                      logger.warning(f"Code non trouvé: {short_code}")
                      raise HTTPException(status_code=404, detail="URL not found")
                  
                  URL_REDIRECTED.inc()
                  logger.info(f"Redirection: {short_code} -> {url_database[short_code]}")
                  
                  return RedirectResponse(url=url_database[short_code])
          
          if __name__ == "__main__":
              uvicorn.run(app, host="0.0.0.0", port=8080)
          EOF
          python /app/main.py
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: url-shortener-service
  labels:
    app: url-shortener
spec:
  selector:
    app: url-shortener
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30000
  type: NodePort
